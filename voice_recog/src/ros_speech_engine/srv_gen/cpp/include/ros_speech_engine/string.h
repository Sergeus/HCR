/* Auto-generated by genmsg_cpp for file /home/chris/ros_workspace/sandbox/ros_speech_engine/srv/string.srv */
#ifndef ROS_SPEECH_ENGINE_SERVICE_STRING_H
#define ROS_SPEECH_ENGINE_SERVICE_STRING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ros_speech_engine
{
template <class ContainerAllocator>
struct stringRequest_ {
  typedef stringRequest_<ContainerAllocator> Type;

  stringRequest_()
  : msg()
  {
  }

  stringRequest_(const ContainerAllocator& _alloc)
  : msg(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;


  typedef boost::shared_ptr< ::ros_speech_engine::stringRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_speech_engine::stringRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stringRequest
typedef  ::ros_speech_engine::stringRequest_<std::allocator<void> > stringRequest;

typedef boost::shared_ptr< ::ros_speech_engine::stringRequest> stringRequestPtr;
typedef boost::shared_ptr< ::ros_speech_engine::stringRequest const> stringRequestConstPtr;


template <class ContainerAllocator>
struct stringResponse_ {
  typedef stringResponse_<ContainerAllocator> Type;

  stringResponse_()
  {
  }

  stringResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ros_speech_engine::stringResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_speech_engine::stringResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stringResponse
typedef  ::ros_speech_engine::stringResponse_<std::allocator<void> > stringResponse;

typedef boost::shared_ptr< ::ros_speech_engine::stringResponse> stringResponsePtr;
typedef boost::shared_ptr< ::ros_speech_engine::stringResponse const> stringResponseConstPtr;

struct string
{

typedef stringRequest Request;
typedef stringResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct string
} // namespace ros_speech_engine

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_speech_engine::stringRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_speech_engine::stringRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_speech_engine::stringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const  ::ros_speech_engine::stringRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d96ed7307768047ULL;
  static const uint64_t static_value2 = 0x54140b85e64c862eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_speech_engine::stringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_speech_engine/stringRequest";
  }

  static const char* value(const  ::ros_speech_engine::stringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_speech_engine::stringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string msg\n\
\n\
";
  }

  static const char* value(const  ::ros_speech_engine::stringRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_speech_engine::stringResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_speech_engine::stringResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_speech_engine::stringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ros_speech_engine::stringResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_speech_engine::stringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_speech_engine/stringResponse";
  }

  static const char* value(const  ::ros_speech_engine::stringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_speech_engine::stringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ros_speech_engine::stringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ros_speech_engine::stringResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_speech_engine::stringRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stringRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_speech_engine::stringResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stringResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ros_speech_engine::string> {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const ros_speech_engine::string&) { return value(); } 
};

template<>
struct DataType<ros_speech_engine::string> {
  static const char* value() 
  {
    return "ros_speech_engine/string";
  }

  static const char* value(const ros_speech_engine::string&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ros_speech_engine::stringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const ros_speech_engine::stringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ros_speech_engine::stringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_speech_engine/string";
  }

  static const char* value(const ros_speech_engine::stringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ros_speech_engine::stringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d96ed730776804754140b85e64c862e";
  }

  static const char* value(const ros_speech_engine::stringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ros_speech_engine::stringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_speech_engine/string";
  }

  static const char* value(const ros_speech_engine::stringResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROS_SPEECH_ENGINE_SERVICE_STRING_H

